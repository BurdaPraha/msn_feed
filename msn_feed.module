<?php

use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme_registry_alter
 */
function msn_feed_theme_registry_alter(&$theme_registry) {
  $theme_registry['paragraph__video_youtube__feed']['template'] = 'paragraph--video-youtube--feed';
  $theme_registry['paragraph__video_youtube__feed']['path'] = drupal_get_path('module', 'msn_feed') . '/templates';
  $theme_registry['paragraph__video_youtube__feed']['type'] = 'base_theme_engine';

  $theme_registry['views_view_row_rss']['path'] = drupal_get_path('module', 'msn_feed') . '/templates';
}

/**
 * Implements template_preprocess_views_view_row_rss
 */
function msn_feed_preprocess_views_view_row_rss(&$vars) {
  $item = $vars['row'];
  $vars['content'] = $item->content;
  $vars['teaser_text'] = $item->teaser_text;
  $vars['teaser_image'] = $item->teaser_image;
}

/**
 * Paragraphs - Gallery item
 * @param $variables
 */
function msn_feed_preprocess_paragraph(&$vars) {
  $paragraph = $vars['paragraph'];
  $bundle = $paragraph->bundle();
  //We need to get rid of nasty markup, 'PRESERVE CERTAIN TAGS' doesn't have enough space to hold all required tags
  //This only fitlers paragraphs we don't manage
  $allowed_tags = '<h2><h3><h4><h5><h6><p><span><div><br><img><url><picture><video><a><strong><iframe><source>';
  if ($vars['view_mode'] == 'feed') {
    $html = drupal_render($vars['content']);
    $clean_html = strip_tags($html, $allowed_tags);
    $vars['content'] = Markup::create($clean_html);
  }
  if ($bundle == 'video' && $vars['view_mode'] == 'feed') {
    //todo: deal with upload video paragraphs
    //deal with video upload
    //dpm($vars,'video vars');
    //dpm($paragraph,'par');
    //dpm($paragraph->get('field_video'), 'video');
    //dpm($paragraph->get('field_file')->entity, 'file video');
  }

  if ($bundle == 'image' && $vars['view_mode'] == 'feed') {
    $media_entity = $paragraph->get('field_image')->entity;
    if(!empty($media_entity)) {
      $content = msn_feed_format_image($media_entity);
      $vars['content'] = $content;
    }
  }

  if ($bundle == 'media' && $vars['view_mode'] == 'feed') {
    $media_entity = $paragraph->get('field_media')->entity;

    if(!empty($media_entity) && $media_entity->hasField('field_image')) {
      $content = msn_feed_format_image($paragraph->get('field_media')->entity);
      $vars['content'] = $content;
    }

  }

  if ($bundle == 'gallery' && $vars['view_mode'] == 'feed') {
    $media_entity = $paragraph->get('field_media')->entity;

    if(!empty($media_entity) && $media_entity->hasField('field_media_images')) {
      $author = $paragraph->getOwner();
      //handle different field names on older instalations
      if($author->hasField('field_first_name') && $author->hasField('field_last_name')) {
        $name = $author->get('field_first_name')->value;
        $name .= ' ' . $author->get('field_last_name')->value;
      } elseif($author->hasField('field_first_name')) {
        $name = $author->get('field_display_name')->value; //CMS2.0
      }
      $content = msn_feed_format_gallery($paragraph->get('field_media')->entity, $name);
      $vars['content'] = $content;
    }

  }
  if ($bundle == 'instagram' && $vars['view_mode'] == 'feed') {
    $media_entity = $paragraph->get('field_media')->entity;
    if(!empty($media_entity)) {
      //$shared_time = date(DATE_RSS ,$media_entity->getCreatedTime());
      $field_url = $media_entity->get('field_url')->getValue();
      $field_url = reset($field_url);
      $title = $media_entity->label();
      if(empty($title)) {
        $title = $field_url["uri"];
      }

      $markup = '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="' . $field_url["uri"] . '" data-instgrm-version="8">';
      $markup .= '<div>';
      $markup .='<p><a href="' . $field_url["uri"] . '">' . $title  . '</a></p>';
      //$markup .= '<p>A post shared by <a href="https://www.instagram.com/elleczech"> Elle Czech</a> (@elleczech) on <time>' . $shared_time . '</time></p>';
      $markup .= '</div>';
      $markup .= '</blockquote>';
      $vars['content'] = Markup::create($markup);
    }
  }


}


/**
 * formats image for msn feed
 * @param Drupal\media_entity\Entity\Media media_entity
 * @return Drupal\Core\Render\Markup
 */
function msn_feed_format_image($media_entity) {

  if(!$media_entity) {
    return array();
  }
  $copyright_value = $media_entity->get('field_copyright')->value;
  if($copyright_value) {
    $copyright = ' data-portal-copyright="' . $copyright_value . '" ';
  } else {
    $copyright = ' ';
  }
  $image_field = $media_entity->get('field_image');
  $image_file = $image_field->entity;
  $image_uri = $image_file->getFileUri();
  $image_info = $image_field->getValue();
  $image_info = reset($image_info);
  $default_alt = "";
  if(!$image_info['alt']) {
    $image_info['alt'] = $default_alt;
  }
  if(!$image_info['title']) {
    $image_info['title'] = $default_alt;
  }
  $image_url = file_create_url($image_uri);
  /*
  $image_render_array = [
    '#theme' => 'image_style',
    '#style_name' => 'feed',
    '#uri' => $image_uri,
    '#alt' => $image_info['alt'],
    '#title' => $image_info['title'],
    '#attributes' => ['data-portal-copyright' => $copyright]
 ];
 */
 //image style outputs relative image path and we need absolute url so screw it
 $markup = '<img
   src="' . $image_url . '"
   alt="' . $image_info['alt'] .'"
   title="' . $image_info['title'] . '"' .
   $copyright . ' />';
   $output = Markup::create($markup);
 return $output;
}

/**
 * formats image gallery for msn feed
 * @param Drupal\media_entity\Entity\Media media_entity
 * @return Drupal\Core\Render\Markup
 */
function msn_feed_format_gallery($media_entity, $author_name) {
  if(!$media_entity) {
    return array();
  }
  if (empty($author_name)) $author_name = 'Redakce';
  $images_field = $media_entity->get('field_media_images');
  $title = $media_entity->label();
  $markup = '<div class="slideshow">';
  $markup .= '<cite>' . $author_name . '</cite>';
  $markup .=  '<title>' . $title . '</title> '; //

  $count_slides = $images_field->count();
  for ($x = 0; $x < $count_slides; $x++) {
    $im = $images_field->get($x)->entity;
    $image_field = $im->get('field_image');

    $copyright_value = $im->get('field_copyright')->value;
    if($copyright_value) {
      $copyright = '<span class="copyright">' . $copyright_value . '</span>';
    } else {
      $copyright = false;
    }
    $description_value = $im->get('field_description')->value;
    if(!$description_value) {
      $description_value = '';
    }

    $image_file = $image_field->entity;
    $image_uri = $image_file->getFileUri();
    $image_info = $image_field->getValue();
    $image_info = reset($image_info);
    $default_alt = "";
    if(!$image_info['alt']) {
      $image_info['alt'] = $default_alt;
    }
    if(!$image_info['title']) {
      $image_info['title'] = $default_alt;
    }
    $image_url = file_create_url($image_uri);
    $markup .= '<figure>';
    $markup .= '<img src="' . $image_url . '" title="' . $image_info['title'] .'" />';
    $markup .= '<figcaption>' . $description_value;
    $markup .= $copyright;
    $markup .= '</figcaption>';
    $markup .= '</figure>';
  }

  $markup .= '</div>';
  $output = Markup::create($markup);
  return $output;
}
